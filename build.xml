<project name="fragment-assembly" default="build" basedir=".">
	<!-- set global properties for this build -->
	<property name="project.name" value="fragment-assembly"/>
	<property name="project.description" value="Fragment Assembly GUI"/>
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="distrib" location="distrib"/>
	<property name="manifest.template" location="${src}/manifest.template"/>
	<property name="manifest.file" location="${src}/MANIFEST.MF"/>
	<property name="version.properties.file" location="${src}/utils/version.properties"/>
	<property name="main.class" value="gui.FragmentDisplay"/>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="build" depends="init" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" />
	</target>

	<target name="distrib" depends="build" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${distrib}/lib" />

		<!-- Put everything in ${build} into the
			${project.name}-${DSTAMP}-${TSTAMP}.jar file -->
		<jar jarfile="${distrib}/lib/${project.name}-${DSTAMP}-${TSTAMP}.jar" basedir="${build}" />
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${distrib}" />
	</target>

	<target name="git-rev-parse">
		<exec executable="git" outputproperty="head.revision">
			<arg value="rev-parse"/>
			<arg value="HEAD"/>
		</exec>
		<echo message="HEAD revision: ${head.revision}"/>
	</target>

	<target name="get-version">
		<loadproperties>
			<file file="${version.properties.file}"/>
		</loadproperties>
		<echo message="Software version ${software.version}"/>
	</target>

	<target name="generate-manifest" depends="git-rev-parse, get-version">
		<copy file="${manifest.template}" tofile="${manifest.file}" overwrite="true"/>
		<replace file="${manifest.file}" token="!!MAIN_CLASS!!" value="${main.class}"/>
		<replace file="${manifest.file}" token="!!HEAD_REVISION!!" value="${head.revision}"/>
		<replace file="${manifest.file}" token="!!VERSION_NUMBER!!" value="${software.version}"/>
		<replace file="${manifest.file}" token="!!PROJECT_DESCRIPTION!!" value="${project.description}"/>
		<replace file="${manifest.file}" token="!!PROJECT_NAME!!" value="${project.name}"/>
	</target>

	<target name="jar" description="create jar file" depends="generate-manifest">
		<antcall target="clean"/>
		<antcall target="build"/>
		<mkdir dir="${distrib}"/>
		<copy file="${version.properties.file}" todir="${build}/utils"/>
		<jar destfile="${distrib}/${project.name}.jar" basedir="${build}" manifest="${manifest.file}"/>
	</target>
</project>
