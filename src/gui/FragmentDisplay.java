package gui;

import generator.Fragmentizer;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import assembly.Fragment;
import assembly.FragmentPositionSource;
import assembly.SequenceAssembler;
import assembly.ShotgunSequenceAssembler;

public class FragmentDisplay
{
	private static final String FRAGMENT_TEXT = "Fragment";
	
	static
	{
		try
		{
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		}
		catch (ClassNotFoundException e)
		{
			e.printStackTrace();
		}
		catch (InstantiationException e)
		{
			e.printStackTrace();
		}
		catch (IllegalAccessException e)
		{
			e.printStackTrace();
		}
		catch (UnsupportedLookAndFeelException e)
		{
			e.printStackTrace();
		}
	}
	
	JFrame frame;
	JTable table;
	
	public FragmentDisplay(String orig, String assembled, List<Fragment> fragments)
	{
		List<List<Fragment>> origGrouped = Fragmentizer.groupByLine(fragments, FragmentPositionSource.ORIGINAL_SEQUENCE);
		List<List<Fragment>> assembledGrouped = Fragmentizer.groupByLine(fragments,
			FragmentPositionSource.ASSEMBLED_SEQUENCE);
		Image origImage = ImagePanel.getFragmentGroupImage(orig, origGrouped, FragmentPositionSource.ORIGINAL_SEQUENCE);
		Image assembledImage = ImagePanel.getFragmentGroupImage(assembled, assembledGrouped,
			FragmentPositionSource.ASSEMBLED_SEQUENCE);
		frame = new JFrame("Fragment Display");
		// frame.setBounds(25, 25, 320, 320);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		System.out.println("Adding new ImagePanel");
		frame.getContentPane().setLayout(new GridBagLayout());
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.gridheight = 1;
		constraints.gridwidth = 1;
		constraints.ipadx = constraints.ipady = 2;
		frame.getContentPane().add(new ImagePanel(origImage), constraints);
		constraints.gridy = 1;
		frame.getContentPane().add(new ImagePanel(assembledImage), constraints);
		
		constraints = new GridBagConstraints();
		constraints.ipadx = constraints.ipady = 2;
		constraints.gridheight = 2;
		constraints.gridx = 1;
		table = new JTable(new FragmentTableModel(fragments));
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		table.setSelectionModel(new FragmentSelectionModel());
		
		JScrollPane tableScroller = new JScrollPane(table);
		frame.getContentPane().add(tableScroller, constraints);
		// frame.getContentPane().add(new JLabel("Test"));
		frame.pack();
		frame.setVisible(true);
	}
	
	/**
	 * TableModel that wraps a <code>List&lt;Fragment&gt;</code>
	 */
	private class FragmentTableModel extends AbstractTableModel
	{
		/**
		 * Generated by Eclipse
		 */
		private static final long serialVersionUID = -4514730749142944712L;
		
		private List<Fragment> list;
		
		public FragmentTableModel(List<Fragment> list_)
		{
			list = new ArrayList<Fragment>(list_);
		}
		
		@Override
		public int getColumnCount()
		{
			return 1 + FragmentPositionSource.values().length;
		}
		
		@Override
		public int getRowCount()
		{
			return list.size();
		}
		
		@Override
		public Object getValueAt(int rowIndex, int columnIndex)
		{
			Fragment fragment = list.get(rowIndex);
			if (columnIndex == 0)
			{
				return fragment.string;
			}
			else
			{
				FragmentPositionSource source = FragmentPositionSource.values()[columnIndex - 1];
				return fragment.getPosition(source);
			}
		}
		
		@Override
		public String getColumnName(int columnIndex)
		{
			if (columnIndex == 0)
			{
				return FRAGMENT_TEXT;
			}
			else
			{
				FragmentPositionSource source = FragmentPositionSource.values()[columnIndex - 1];
				return source.guiDescription;
			}
		}
	}
	
	private class FragmentSelectionModel implements ListSelectionModel
	{
		@Override
		public void addListSelectionListener(ListSelectionListener arg0)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void addSelectionInterval(int arg0, int arg1)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void clearSelection()
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public int getAnchorSelectionIndex()
		{
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public int getLeadSelectionIndex()
		{
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public int getMaxSelectionIndex()
		{
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public int getMinSelectionIndex()
		{
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public int getSelectionMode()
		{
			// TODO Auto-generated method stub
			return 0;
		}
		
		@Override
		public boolean getValueIsAdjusting()
		{
			// TODO Auto-generated method stub
			return false;
		}
		
		@Override
		public void insertIndexInterval(int arg0, int arg1, boolean arg2)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public boolean isSelectedIndex(int arg0)
		{
			// TODO Auto-generated method stub
			return false;
		}
		
		@Override
		public boolean isSelectionEmpty()
		{
			// TODO Auto-generated method stub
			return false;
		}
		
		@Override
		public void removeIndexInterval(int arg0, int arg1)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void removeListSelectionListener(ListSelectionListener arg0)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void removeSelectionInterval(int arg0, int arg1)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void setAnchorSelectionIndex(int arg0)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void setLeadSelectionIndex(int arg0)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void setSelectionInterval(int arg0, int arg1)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void setSelectionMode(int arg0)
		{
			// TODO Auto-generated method stub
		}
		
		@Override
		public void setValueIsAdjusting(boolean arg0)
		{
			// TODO Auto-generated method stub
		}
		
	}
	
	/**
	 * XXX: Temporary
	 * 
	 * @param args
	 */
	public static void main(String[] args)
	{
		if (args.length < 4)
		{
			System.err.printf("*** Usage: %s string n k kTolerance", FragmentDisplay.class.getCanonicalName());
			System.exit(1);
		}
		String string = args[0];
		int n = Integer.parseInt(args[1]);
		int k = Integer.parseInt(args[2]);
		int kTolerance = Integer.parseInt(args[3]);
		FragmentPositionSource source = FragmentPositionSource.ORIGINAL_SEQUENCE;
		List<Fragment> fragments = Fragmentizer.fragmentizeForShotgun(string, n, k, kTolerance);
		SequenceAssembler sa = new ShotgunSequenceAssembler();
		for (Fragment fragment : fragments)
		{
			System.out.printf("%s%n", fragment.string);
		}
		String assembled = sa.assembleSequence(fragments);
		for (Fragment fragment : fragments)
		{
			System.out.printf("%5d: %s%n", fragment.getPosition(source), fragment.string);
		}
		System.out.println();
		System.out.println(string);
		FragmentDisplay display = new FragmentDisplay(string, assembled, fragments);
	}
}
